#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os

require_module('C++')


def clean():
	"""Removes any files and directories generated when building."""
	rmfile('saltynes')
	rmdir_and_children('build')
	rmdir_and_children('src/bin')
	rmdir_and_children('newlib')

def _configure():
	require_shared_library('libSDL', lambda ver: ver >= (1, 2))

	cxx = cxx_get_default_compiler()
	cxx.optimize = True
	cxx.debug = True
	cxx.warnings_all = True
	cxx.warnings_as_errors = True
	cxx_save_compiler(cxx)

def desktop():
	"""Builds the program for the desktop using SDL. Will only build files that have changed since the last build."""
	require_not_root()
	_desktop()

def redesktop():
	"""Rebuilds the program for the desktop using SDL. Will build all the files. Even if they have not changed since last build."""
	require_not_root()
	clean()
	_desktop()

def _desktop():
	_configure()

	# Copy the files to the build directory
	mkdir_f('build')
	rmdir_and_children('build/src')
	cpdir('src', 'build/src')
	cd('build')

	# Get the names of all the C++ files
	code_files = []
	for entry in os.listdir('src'):
		if entry.lower().endswith('.cc'):
			code_files.append(entry[:-3])
	code_files.sort()

	# Build each C++ file into an object
	parallel_start()
	for f in code_files:
		object_name = '{0}.o'.format(f)
		code_name = 'src/{0}.cc'.format(f)
		cxx_build_object(object_name, [code_name], ['-DSDL=true'])
	parallel_end()

	# Link all the objects into the program
	object_files = [s + '.o' for s in code_files]
	cxx_build_program('saltynes', object_files, ['-lSDL', '-lpthread', '-lrt', '-DSDL=true'])

	# Run the program
	cd('..')
	mvfile('build/saltynes', 'saltynes')
	print('Run the program like this:\n./saltynes roms/example.nes')

def nacl():
	require_not_root()
	clean()
	_configure()

	os.environ['CXXFLAGS'] = '-O2 -g -pthread -std=gnu++98 -Wno-long-long -Wall -Wswitch-enum -Werror -pedantic'
	os.environ['LDFLAGS'] = '-g -pthread -lppapi_cpp -lppapi'

	os.environ['OSNAME'] = 'linux' #FIXME: should be gotten from the OS
	os.environ['TC_PATH'] = '${NACL_SDK_ROOT}/toolchain'
	os.environ['CC'] = '${TC_PATH}/${OSNAME}_x86_newlib/bin/i686-nacl-gcc'
	os.environ['CXX'] = '${TC_PATH}/${OSNAME}_x86_newlib/bin/i686-nacl-g++'
	os.environ['LINK'] = '${TC_PATH}/${OSNAME}_x86_newlib/bin/i686-nacl-ld'
	os.environ['DUMP'] = '${TC_PATH}/${OSNAME}_x86_newlib/x86_64-nacl/bin/objdump'
	os.environ['STRIP32'] = '${TC_PATH}/${OSNAME}_x86_newlib/bin/i686-nacl-strip'
	os.environ['STRIP64'] = '${TC_PATH}/${OSNAME}_x86_newlib/bin/x86_64-nacl-strip'
	os.environ['NMF'] = '${NACL_SDK_ROOT}/tools/create_nmf.py'

	mkdir('newlib')
	mkdir('newlib/src')

	# Get the names of all the C++ files
	code_files = []
	for entry in os.listdir('src'):
		if entry.lower().endswith('.cc'):
			code_files.append(entry[:-3])
	code_files.sort()

	# Build each C++ file into an object
	parallel_start()
	for f in code_files:
		object_name = 'newlib/src/{0}_x86_32.o'.format(f)
		code_name = 'src/{0}.cc'.format(f)
		cxx_build_object(object_name, [code_name], ['-m32 -DTCNAME=newlib -DNACL=true -I${NACL_SDK_ROOT}/include'])
	parallel_end()

	# Link all the objects into the program
	object_files = ['newlib/src/{0}_x86_32.o'.format(s) for s in code_files]
	cxx_link_program(
		'newlib/salty_nes_x86_32.nexe', 
		object_files, 
		['-m32 ${LDFLAGS}'])

	# Build NaCl manifest file
	_do_on_fail_exit("Building NaCl Manifest 'newlib/salty_nes.nmf'",
					"Failed to build NaCl Manifest 'newlib/salty_nes.nmf'.",
				"${NMF} -D ${DUMP} -o newlib/salty_nes.nmf newlib/salty_nes_x86_32.nexe -t newlib -s newlib")

	# Strip the nexe to make it smaller
	_do_on_fail_exit("Stripping program 'newlib/salty_nes_x86_32.nexe'",
					"Failed stripping program 'newlib/salty_nes_x86_32.nexe'.",
				"${STRIP32} newlib/salty_nes_x86_32.nexe")



