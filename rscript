#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import lib_raise_cxx as CXX
import lib_raise_linker as Linker
import lib_raise_ar as AR
import lib_raise_fs as FS
import lib_raise_find as Find
import lib_raise_users as Users
import lib_raise_process as Process

def clean():
	"""Removes any files and directories generated when building."""
	FS.remove_file('saltynes', ignore_failure = True)
	FS.remove_dir('build', and_children = True)
	FS.remove_dir('src/bin', and_children = True)
	FS.remove_dir('pnacl', and_children = True)

def _configure():
	cxx = CXX.get_default_compiler()
	cxx.debug = True
	cxx.standard = CXX.Standard.std2011
	cxx.optimize_level = 2
	cxx.warnings_all = True
	cxx.warnings_as_errors = True
	#cxx.compile_time_flags = ['NDEBUG']

	return cxx

def desktop():
	"""Builds the program for the desktop using SDL. Will only build files that have changed since the last build."""
	Users.require_not_root()
	_desktop()

def redesktop():
	"""Rebuilds the program for the desktop using SDL. Will build all the files. Even if they have not changed since last build."""
	Users.require_not_root()
	clean()
	_desktop()

def _desktop():
	cxx = _configure()
	Find.require_shared_library('libSDL', 'ver >= (1, 2)')

	# Copy the files to the build directory
	FS.make_dir('build', ignore_failure = True)
	FS.remove_dir('build/src', and_children = True)
	FS.copy_dir('src', 'build/src')
	FS.change_dir('build')

	# Get the names of all the C++ files
	code_files = []
	for entry in os.listdir('src'):
		if entry.lower().endswith('.cc'):
			code_files.append(entry[:-3])
	code_files.sort()

	# Build each C++ file into an object
	Process.concurrent_start()
	for f in code_files:
		object_name = '{0}.o'.format(f)
		code_name = 'src/{0}.cc'.format(f)
		cxx.build_object(object_name, [code_name], ['-DSDL=true'])
	Process.concurrent_end()

	# Link all the objects into the program
	object_files = [s + '.o' for s in code_files]
	cxx.build_program('saltynes.exe', object_files, ['-lSDL', '-lpthread', '-lrt', '-DSDL=true'])

	# Run the program
	FS.change_dir('..')
	FS.move_file('build/saltynes', 'saltynes')
	print('Run the program like this:\n./saltynes roms/example.nes')

def nacl():
	Users.require_not_root()
	clean()
	cxx = _configure()

	Find.require_environmental_variable('NACL_SDK_ROOT')

	os.environ['OSNAME'] = 'linux' #FIXME: should be gotten from the OS
	os.environ['TC_PATH'] = '${NACL_SDK_ROOT}/toolchain'
	os.environ['CC'] = '${TC_PATH}/${OSNAME}_pnacl/bin/pnacl-clang -c'
	os.environ['CXX'] = '${TC_PATH}/${OSNAME}_pnacl/bin/pnacl-clang++ -c'
	os.environ['LINK'] = '${TC_PATH}/${OSNAME}_pnacl/bin/pnacl-clang++'
	os.environ['DUMP'] = '${TC_PATH}/${OSNAME}_pnacl/bin/pnacl-objdump'
	os.environ['STRIP'] = '${TC_PATH}/${OSNAME}_pnacl/bin/pnacl-strip'
	os.environ['FINALIZE'] = '${TC_PATH}/${OSNAME}_pnacl/bin/pnacl-finalize'
	os.environ['NMF'] = '${NACL_SDK_ROOT}/tools/create_nmf.py'

	cxx._path = os.environ['CXX']
	cxx.position_independent_code = True
	cxx.compile_time_flags = ['NDEBUG', 'NACL=true', 'TCNAME=pnacl']

	os.environ['NACL_WARNINGS'] = '-Wno-long-long -Wswitch-enum -pedantic'
	os.environ['NACL_CXXFLAGS'] = '-MMD -pthread ${NACL_WARNINGS}'
	os.environ['NACL_INCLUDES'] = '-I${NACL_SDK_ROOT}/include -I${NACL_SDK_ROOT}/include/pnacl'
	os.environ['LDFLAGS'] = '-g -pthread -lppapi_cpp -lppapi'

	FS.make_dir('pnacl')
	FS.make_dir('pnacl/src')

	# Get the names of all the C++ files
	code_files = []
	for entry in os.listdir('src'):
		if entry.lower().endswith('.cc'):
			code_files.append(entry[:-3])
	code_files.sort()

	# Build each C++ file into an object
	Process.concurrent_start()
	for f in code_files:
		object_name = 'pnacl/src/{0}_pnacl.o'.format(f)
		code_name = 'src/{0}.cc'.format(f)
		cxx.build_object(object_name, [code_name], ['${NACL_CXXFLAGS} ${NACL_INCLUDES}'])
	Process.concurrent_end()

	# Link all the objects into the program
	links = "${LINK} -o pnacl/salty_nes_unstripped.bc " + \
	str.join(' ', ["./pnacl/src/{0}_pnacl.o".format(f) for f in code_files]) + \
	" -L${NACL_SDK_ROOT}/lib/pnacl/Release ${LDFLAGS}"

	Process.do_on_fail_exit("Linking C++ program 'pnacl/salty_nes_unstripped.bc'",
					"Failed to link C++ program 'pnacl/salty_nes_unstripped.bc'.",
				links)

	# Convert the byte code into a pexe
	Process.do_on_fail_exit("Converting bytecode to pexe 'pnacl/salty_nes_unstripped.pexe'",
					"Failed to build pexe 'pnacl/salty_nes_unstripped.pexe'.",
				"${FINALIZE} -o pnacl/salty_nes_unstripped.pexe pnacl/salty_nes_unstripped.bc")

	# Strip the pexe to make it smaller
	Process.do_on_fail_exit("Stripping program 'pnacl/salty_nes_unstripped.pexe'",
					"Failed stripping program 'pnacl/salty_nes_unstripped.pexe'.",
				"${STRIP} -o pnacl/salty_nes.pexe pnacl/salty_nes_unstripped.pexe")

	# Build NaCl manifest file
	Process.do_on_fail_exit("Building NaCl Manifest 'pnacl/salty_nes.nmf'",
					"Failed to build NaCl Manifest 'pnacl/salty_nes.nmf'.",
				"${NMF} -D ${DUMP} -o pnacl/salty_nes.nmf pnacl/salty_nes.pexe -t pnacl -s pnacl")
