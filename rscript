#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os

def clean():
	"""Removes any files and directories generated when building."""
	rmdir_and_children('build')
	rmdir_and_children('src/bin')
	rmdir_and_children('src/glibc')
	rmdir_and_children('src/newlib')

def _configure():
	require_programs(['g++'])

	require_shared_libraries([
	'libSDL']) #, 'pthread', 'rt'])

	os.environ['CC'] = 'g++'
	os.environ['CFLAGS'] = ' -g -O2 -Wall -Wunused -Wextra -Werror'

def build():
	"""Builds the program. Will only build files that have changed since the last build."""
	require_not_root()
	_build()

def rebuild():
	"""Rebuilds the program. Will build all the files. Even if they have not changed since last build."""
	require_not_root()
	clean()
	_build()

def _build():
	_configure()

	# Copy the files to the build directory
	mkdir_f('build')
	rmdir_and_children('build/src')
	cpdir('src', 'build/src')
	cd('build')

	# Get the names of all the c++ files
	code_files = []
	for entry in os.listdir('src'):
		if entry.lower().endswith('.cc'):
			code_files.append(entry[:-3])
	code_files.sort()

	# Build each c++ file into an object
	for f in code_files:
		object_name = '{0}.o'.format(f)
		code_name = 'src/{0}.cc'.format(f)
		#parallel_c_build_object(object_name, [code_name], ['-DSDL=true'])
		c_build_object(object_name, [code_name], ['-DSDL=true'])
	#parallel_wait()

	# Link all the objects into the program
	object_files = [s + '.o' for s in code_files]
	c_build_program('main', object_files, ['-lSDL', '-lpthread', '-lrt', '-DSDL=true'])

	# Run the program
	cd('..')
	mvfile('build/main', 'main')
	print('Run the program like this:\n./main roms/example.nes')




